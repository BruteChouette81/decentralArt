"""
Program to calculate the money generated by the CPL fee redcuction system. This program will also be used in the CPL client explorer to calculate a user`s contribution.

RULES:
- payments must apply credit card cash-back program (1.5-2.5% fee)
- payments must transfer to fiat in a valid exchange ( apply the transfer fees )
- stable backed earning must be approoved by majority of peers and only used when peers can't self-earn
- must apply transfer fees when retrieving, but not withdraw fee
- all not commited worth must be applied a fee on withdraw ( 0.5-1% on withdraw)
- COMPOUND is key

TODO:
- add the 1% of not calculated profit
- calculate how much comes back to the sellers
- compare standart industry vs CPL using graph


INFOS:
- payment fee distribution: 1.65% - credit card, 1% - flat fee
- convertion F2C: 0.24% fee 


    
"""
import matplotlib.pyplot as plt

## variables 

#fees
avg_payment_fee = 0.014 # 1.65%

deposit_fee = 0  #kraken: free for swift/wire min 100- 150

withdraw_fee = 0 #kraken: 1: 0.35% min 50 (2-5 business day) 2: wire (free) min 1000 (10 mins) #others: 0% interac

avg_f2c_fee = 0.006 # kraken: 0.24% paytrie: 0.006 (min 5% woth (833.3$) newton: 0.01 (no deposit or withdraw fees)

flat_fee = 0.05 # flat fee without committing 0.5%

avg_todays_fee = 0.029
#transactions worth 


avg_client_volume = 5000*12
number_of_clients = 2
avg_volume_year = avg_client_volume*number_of_clients # 1,200,000 $


commitment_rate = 0.5 # 50% of money stay in the account

earn_per_mounth = (0.1038/12) # 10% a year


#other infos
num_of_years = 1
mode = "mounth" 


def calculateWorthByMounth(number_of_clients, avg_volume_year):
    wby = []
    wbm = []
    flat_fee_paid = 0
    avg_paid_fee = 0 #avg fee paid by merchant
    

    overall_P = 0
    for j in range(num_of_years):
        for i in range(12): #full year
            #remove fees
            #print(i)
            worth1mounth = avg_volume_year / 12 * (1-avg_payment_fee) # remove the fee
            
            worth1mounth = worth1mounth - (worth1mounth*deposit_fee) #calculate deposite fee to exchange
           
            net_worth1mounth = (worth1mounth * commitment_rate) * (1-avg_f2c_fee) # net cash commited
            
            worthNearn = (net_worth1mounth + net_worth1mounth * (earn_per_mounth * (12-i))) # + ((overall_P/12) + (overall_P/12) * (earn_per_mounth * (12-i)))
            wbm.append(worthNearn* (1-avg_f2c_fee) + (worth1mounth *(1-commitment_rate)) - (worthNearn*withdraw_fee))
            number_of_clients += (2*(i))
            avg_volume_year = avg_client_volume*number_of_clients
            

        
        for i in range(len(wbm)):
            if (i > j*12):
                
                overall_P += wbm[i]-worth1mounth + (worth1mounth*(1-commitment_rate)*flat_fee)
                flat_fee_paid += (worth1mounth*(1-commitment_rate)*flat_fee)
        avg_paid_fee = flat_fee_paid/avg_volume_year
        print(f"Worth by mounth {wbm}")
        print(f"Average paid fee % per year over the volume for year {j}: {avg_paid_fee*100}%")
        flat_fee_paid = 0
        #print(overall_P)
        wby.append(overall_P)
        if(len(wby)>1):
            print(f"Average % of transaction made in profit for year {j}: {((wby[j]-wby[j-1])/avg_volume_year)*100}%")
        else:
            print(f"Average % of transaction made in profit for year {j}: {((wby[j])/avg_volume_year)*100}%")
        overall_P += (overall_P*(earn_per_mounth*12)*num_of_years-(j+1))
    
        
    
    return wbm, wby, avg_volume_year

def Reverse(lst):
   new_lst = lst[::-1]
   return new_lst

#function to 
def graph(wbm):
    
    plt.plot(wbm)
    plt.ylabel('worth')
    plt.show()

if __name__ == '__main__':
    wbm, wby, avg_volume_year = calculateWorthByMounth(number_of_clients, avg_volume_year)
    #print(f"Worth by mounth: {wbm}")
    print(f"Profit by year: {wby}")
    profit_competitor = [avg_volume_year*0.01] * num_of_years
    print(f"Profit by year for competitor: {profit_competitor}")
    Pwbm = []
    for i in range(len(wbm)):
        Pwbm.append(wbm[i]-(avg_volume_year/12))
        
    #print(f"Profit by mounth: {Pwbm}")
    graph(wby)

    '''overall_P = 0
    for i in range(len(wbm)):
       overall_P += wbm[i]-(avg_volume_year/12)

    print(f"Overall Profit: {overall_P} $ ({(overall_P/avg_volume_year*100)})")

    #graph(Reverse(wbm))'''

