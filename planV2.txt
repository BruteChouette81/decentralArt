plan to partially remove crypto using protocol (convention code)

NAME: Centralized payment ledger 

DESCRIPTION: portocol or convention to allow fiat payment to be as decentralized as crypto payment.


architecture: 

1. user ==> transfer fiat to payment processing oracle with key (keccak DID first 10 chars )
2. payment processing oracle ==> transfer $credits to user (lock fiat in account) ==> gas fees
3. transfer $credits to market (lock them in market)
4. transfer $credits to seller once approoved 
5. exchange $credits to oracle (stake or go)
6. if stake: setup a centralized retrieval method
7. stake USDC and gather rewards  

(4.) if not approved in time: transfer $credits to buyer and exchange them for fiat

oracle: own ETH account that authenticate in the Only pool 

**important: apply changes to decentralized payment system to keep everything together

**important: gas fee: make the oracle pay for it, but charge seller with it (penality on $credits next time they want to retrieve cash) -> make cash on penalities

list of applicable fees: 
-> mint nft using oracle to contract 0.5 ==> 0.0000626268 0.15$ 0.0000810796 0.15$ 0.0000626244 0.15$
-> mint token 0.5 ==> 0.0000683518 or 0.15 $ high price 
-> allowance 0.5 ==> 0.0000713429 or 0.15 $ high price 
-> transfer 0.5 ==> 0.0001127293 or 0.25 $ high price 
-> (refund--> eliminate gas use CPL)
-> proove 0.5 ==>0.0000855221 or 0.20 $ high price 
-> burn 0.5 ==> 0.0000683518 or 0.15 $ high price 

total: 1,5$ we chage 3$

max amount 3$ --> be return minus penalities

**important: proof of decentralization: creation of new account + never changing address

**didtransfer: seller _address/ buyer _address .txt 

new contracts :
-credits: 0xc183177E3207788ea9342255C8Fcb218763d46e2 CONTRACT, ABI in ORACLE
-Rnft : 0x42F1c1E4c3b3287d727C15cf7034a26d3E23a7E4 ABI AND CONTRACT
-dds: 0xdeAf39D7923dD5bbeb22C591694A0dBc38b6AD3a -> 0x79915E0af8c4DeC83c5c628b2a050B7062D7bC1d CONTRACT ABI in oracle AND site

oracle PK: 0xbc2ba2203c4cc302fcfb2df6358d01f6a15bd0d363bb1cabd17aef51921d501b
oracle address: 0x439da8962debe41408712dE41b6161B66349E250


PAYPAL:

client Id: AbONA1Q9rbHJLPe5ZGWwssIF8z06zRc6y1qU2LsPp0lXaZYjqaCjSTXuC7sAdFW2E_AZCUOuJvnZDhaZ
secret: EIKRUllYOi1Y3h13zdpAWCT-dNICCrvI71X9V_7tgFKpP2hFaQSIKuj3OK--vGSpiO2IRB0s9_99E0Pe

email: sb-bk47ua26361299@business.example.com
pass: Yx&{St9D


STAKING/DEFI: 

- choose a defi service or pay after a certain point
- terms can be arguable (time of invest)
- all crypto is collected our side using centralized exchange 
- after transfering to dollars: automarize a connected other paypal account to transfer funds to user

URLs:

    Exchanges:
        karken docs: https://docs.kraken.com/rest/#tag/User-Trading/operation/addOrder
        kraken withdraw: https://kraken.zendesk.com/hc/en-us/articles/360000423043-Cash-withdrawal-options-fees-minimums-and-processing-times-
        kraken withdraw api: https://docs.kraken.com/rest/#tag/User-Funding/operation/withdrawFunds
        crypto.com docs: https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-get-deposit-address
        bitbuy docs: https://bitbuy.ca/bitbuy-api

    Staking / DeFi:
        liquidity - uniswap: https://info.uniswap.org/#/arbitrum/pools/0xc31e54c7a869b9fcbecc14363cf510d1c41fa443 // docs: https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolActions.sol
        lend (centralized): https://www.bybit.com/en-US/earn/savings/
        lend (decentralized): https://www.youhodler.com/loyalty
        lend (centralized/more legit): https://crypto.com/ca/earn
        usdc docs for staking: https://www.circle.com/en/
        high reward lending: https://stakingcrypto.info/en/lending/usd-coin

    won't need:
        moonpay (won't need): https://docs.moonpay.com/moonpay/implementation-guide/off-ramp#confirm-supported-regions-currencies-and-bank-account-types
        banxa docs (won't need): https://docs.banxa.com/docs/partner-dashboard-configurations

    ecom: https://www.edesk.com/fr/blog/ecommerce-website-cost/

list of tests: 
    - did (meta and imperial) --> change pk to password
    - did transfer
    - paypal buying  DONE ✔️ --> frontend 
    - crypto buying (disabled)
    - retrieving money
    - gas CALCULATING !!! tracking / penalities 
    - feed the oracle eth (2-3$ per items ) --> build a eth automatic buyer system -> for staking 
    - 

PLAN + TEST:

goal: test the app in its most primitive state

things to do before test:

- Mint / multiple Mint -> list on oracle (modify contracts) DONE ✔️

- complete purchase on oracle DONE ✔️

- complete retrival (submitProof and burning) DONE ✔️

- retrieve cash with oracle DONE ✔️

class contracts to see which we need and add function and finish them DONE ✔️

make a archive file and remove every none-used functionnalities (metamask and ...)

TEST:

- mint real item DONE ✔️ EC: 10

- multiMint real items DONE ✔️ EC: 20

- database mint  OK ✔️

- load did password / create account DONE ✔️
- load did market DONE ✔️
//0x953888Ae66748E5732a95D65e9460724D56e8957 
// laptop: 0x19CcD7690B3a9e57225F041DB28705F9E9Ec9153

- load item market  DONE ✔️ 
- calculate good fees / penalities on market (2.9% for paypal + 4$ for our fees) ==> in console.jsx and nfts.jsx DONE ✔️ 
- all in canadian DONE ✔️ check to be sure
- ensure that bytes are chill (underflow/overflow: reduce to two decimals points) ==> prices are offset by one in the item list (good in contract) DONE ✔️ 

BEFORE RELEASE:
- clean cpl app.js
- check feeding (amount of gas in cpl)
- check underflow (bytes)
- check any other error that we might enconter using the market (exception reverted)
-> error system to handle all errors DONE ✔️

- calculate fees in form and add staking program oportunity DONE ✔️
- no more bug for nft owner ==> nft receiver (DONE ✔️)

- mintBuy DONE ✔️ EC: 50

- did transfer  DONE ✔️

- submitProof and go  DONE ✔️ EC: 40

- way to add a paypal address DONE ✔️

- refunds test + new market payout DONE ✔️ EC: 30

- delete Item: takes the fee of refund ==> need to modify contract ==> push contract and ABI DONE ✔️ EC: 60

- CPL secret: private key, public address / CPL amelioration

- password bug DONE ✔️

- style DONE ✔️

- facebook  DONE ✔️ 

- my items in market DONE ✔️

- categories in market / my items OK ✔️

- individual items link (facebook) DONE ✔️

- load item in chunk (quicker) DONE ✔️ + delete db and get infos from uri + fast search (from indexing) OK ✔️

- relocate loading item in nftbox ==> load every singular items one by one DONE ✔️

- fix multiMint error (get ids of items from contract before) DONE ✔️ ==> test DONE ✔️

- adapt price DONE ✔️

- time out bug DONE ✔️

- handle more items at a time: split numreal in ticks, load the first 10 items, then set interval to autorise the displaying of the rest DONE ✔️ ==> apply it everywhere DONE ✔️

- multi mint: last token id erc721 bug ==> review multipleMint method in Rnft.sol and multipleMintList in dds.sol ==> DONE ✔️

- push new dds contract for retrieve cash ==> credit.sol: address _pool = public, retriveCredit in dds.sol ==> test retrieve cash ==> OK ✔️

- decentralized the minting process (more ipfs nodes) ==> OK ✔️

- reorganize OK ✔️

- one button load of your commands DONE ✔️=> make its own page => use Rnft.sol contract to get metadata DONE ✔️

- on/off account DONE ✔️

- remove debug alert DONE ✔️ ==> log

->>>>>> Real life Transaction: PROOVED ✔️

- mobile version: home page DONE ✔️, account DONE ✔️, market DONE ✔️

- email list  DONE ✔️

- sounds  DONE ✔️

- push fee % getting in app.js  

- reopen cpl technology site: cpltechnology.net w/ new design / whitepaper DONE ✔️

 

- review tile arrangement DONE ✔️
- more cpl documentation + public ledger using uuid ID's and block scan for transactions database ==> important for validation DONE ✔️
- work on fee reduction system ( proove ) 
- add more like: fee payed, centralized receipt and more options
- account recovery DONE ✔️ ==> remove delete local storage from setting: ==> use few mounths cookie until fix
--> hit the transfer account button in account DONE ✔️
--> didTRansfer but for account transfer DONE ✔️
--> enter account number/email address and password to load did from cloud DONE ✔️
--> button to sync change DONE ✔️
--> button to delete old email from email base 
--> figure out a nft style account transfer
- securize paypal info DONE ✔️
- securize tracking codes DONE ✔️

- translate the website:
    home DONE ✔️
    navbar DONE ✔️
    endofpage DONE ✔️
    about DONE ✔️
    FAQ DONE ✔️
    compare DONE ✔️
    market DONE ✔️
    items DONE ✔️
    account DONE ✔️
    other DONE ✔️

CPL v 2.0: 

    DDS: 
    - 16 numbers tracking code problem DONE ✔️
    - DDS: main DB==> never change DONE ✔️
    - DDS: mess around with secuity to check the best option DONE ✔️
    - DDS: new dds: launch and test transaction DONE ✔️
    --> buying (on start connect to db to access items) ==> add a security check (like OnlyBuyingContract) DONE ✔️
    --> minting DONE ✔️
    --> prooving ==> multiple type of prooving DONE ✔️

    Instruction set:
    mint new: Rnft, DDS DONE ✔️
    mint new sub-contracts and set them in DDS DONE ✔️
    set _buyContract in minting.sol DONE ✔️
    set _prooveContract in buying.sol DONE ✔️
    set _prooveContract in CPL in mintbuy in credit.mint(_prooveContract) DONE ✔️

    set ABI in cpl DONE ✔️
    set all contract in cpl DONE ✔️

    set pool in DDS, minting, buying, prooving DONE ✔️

    oracle: 0x439da8962debe41408712dE41b6161B66349E250

    CREDITS: 0xc183177E3207788ea9342255C8Fcb218763d46e2
    RNFT: 0x6C1c1c23187b0aFF51E941e139A22645fd87f5A0
    DDS: 0x0188EFFc74943b4F54833A14f58E632a3f920a56

    buying: 0xc73CBdd54Af25AE6be362B222074027d545963cC
    minting: 0xF9E4e1C24206178CC632D3Bdfe6c389cc09E5B0A
    prooving: 0x0179F9C8B674CCd07354Dcc3998d0160216D02a6

    CPL:
    - securize api key DONE ✔️
    - create api key security ==> using account signature DONE ✔️ ==> test and incorporate everywhere 
    ==> provide a sign message w/ a copy of the signer. then, sign the same code and validate the authenticity of the signer. ==> do it before to save time DONE ✔️
    

    WEBSITE:
    - make the transaction process easier:
    --> putting infos while in approval DONE ✔️ ==> test 
    --> spin when making a transaction DONE ✔️ ==> test DONE ✔️
    --> adding text DONE ✔️ 
    - using contract (getInfos), build new myItems page DONE ✔️ ==> transfer fetching stuff to server2 so less lag(1 server call)

    - remake home page (background image) DONE ✔️
    - remake profile (fit mobile)

    *COMPILER for legder

    green flag: 
    - minting DONE ✔️
    - two items: one paypal (13 letters code), one credit(16 letters code) DONE ✔️ ==> no error test
    - deleting DONE ✔️
    - prooving DONE ✔️
    - other pages DONE ✔️ ==> test

Tickets === maitre canadien ==> need to load better

plan for 2024:
**see marketing idea
- finish testing dds v2 DONE ✔️
- all of myitems into serverv2 DONE ✔️
- all storage in cookies DONE ✔️ ==> incorporate ==> transfer account using nft instead of bucket (ipfs):
    check for all items on blockchain (100% decentralized and all p2p) ==> rentability
    same system: now: did ==> AWS ==> new device
                 new: did ==> block/ipfs(temporary p2p) ==> new device
    find a back-way to store account did
- run ipfs node on server ==> waiting for p2p // https://pureinfotech.com/connect-two-computers-directly-ethernet-cable-windows-10/
- incorporate new api key security:  DONE ✔️
    deploy and test for: --> digest need to change so add random var
    buying: deploy  DONE ✔️, test DONE ✔️
    prooving  DONE ✔️, test DONE ✔️
    retrieving
- check for hybrid lightning network idea + interpretor 
- software to push mutiple items to CPL DONE ✔️ ==> adapt website
- put paypalHandler (dds related functions) on EC2 and decentralize them
- work around new DDS + add feature for the ledger + participation system
- one click load item in market DONE ✔️ algo it 
- load all items in home DONE ✔️
- new presentation: middlemanless technology (every thing we rely on now will disapear or replace by lightning network)
- switch to bitcoin
- own payment gateway in receipt.jsx DONE ✔️  ==> integrate (need to ask paypal in prod)
- PARTICIPATION system: 
    math DONE ✔️ ==> improove
    1: check for payment gateway (visa/mastercard/crypto) ==> lower fees DONE ✔️ ==> get licensed by visa
    2: check for P2P exchange for stable earn ==> PayTrie 0.6 %/kraken 0.26% fee canada-proof ==> usdc/cadc
    3: build the F2E 
    4: check rentability (long term)
    5: impliment more earning: stable-back lending, exchange fee, buy-now pay-later (BNPL): calculate rentability

-google ads: 125(110-230) - 255(230-270)
-facebook ads: 100 for a mounth or like 10$ a day/ 5$

estimate: 

Marketing idea: 

- post more on facebook

- publicity: 5 orders or more

- notification system with promotion ==> email list/facebook 

- discount for top 10 new account

- promotion code: push notif, email, lottery and winner tracker ==> winner page

- build google seo DONE ✔️ + maximize marketing 

- shopify ads campaign

- more "bigger" item (maitre canadien)

- add more sellers 

- add more stores (numstore: 1)

- connect with N

-card present (shop/square market place) ==> create POS machine

B2B offering: 
    - free estimate and consultation
    - connect your website for free on CPL 
    - free fonctionnality adding and maintenance of the website
    - website upgrade: pay to upgrade https://www.fiverr.com/search/gigs?query=react%20website&source=top-bar&ref_ctx_id=9743bdb251a249bbabea13588ee49de3&search_in=everywhere&search-autocomplete-original-term=react%20website
    - marketing and social maintenance 
    - marketing and social upgrade: pay to upgrade
    - no engagement
    - best level of security ever created

    Cost:
    - once on CPL it is free every mounth execpt for upgrade service
    - there is a 5% fee or lower (will be lower) around 3%-0% in a couple of mounths
    - no responsability for break down (terms and conditions)
    - no taxes for originator
    - POS not supported yet but sync with POS using API


